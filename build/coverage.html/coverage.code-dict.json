{"/home/travis/build/npmtest/node-npmtest-then-redis/test.js":"/* istanbul instrument in package npmtest_then_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-then-redis/lib.npmtest_then_redis.js":"/* istanbul instrument in package npmtest_then_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_then_redis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_then_redis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-then-redis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-then-redis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_then_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_then_redis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_then_redis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_then_redis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_then_redis.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_then_redis.__dirname + '/lib.npmtest_then_redis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-then-redis/node_modules/then-redis/lib/index.js":"'use strict';\n\nexports.Client = require('./Client');\n\nexports.createClient = function (options) {\n  return new exports.Client(options);\n};","/home/travis/build/npmtest/node-npmtest-then-redis/node_modules/then-redis/lib/Client.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = require('events');\n\nvar _url = require('url');\n\nvar _redisCommands = require('redis-commands');\n\nvar _redisCommands2 = _interopRequireDefault(_redisCommands);\n\nvar _redis = require('redis');\n\nvar _redis2 = _interopRequireDefault(_redis);\n\nvar _RedisUtils = require('./RedisUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ClientProperties = [\n// redis properties, forwarded read-only.\n'connection_id', 'connected', 'ready', 'connections', 'options', 'pub_sub_mode', 'selected_db'];\n\nvar ConnectionEvents = ['ready', 'connect', 'reconnecting', 'error', 'end'];\n\nvar MonitorEvents = ['monitor'];\n\nvar PubSubEvents = ['message', 'pmessage', 'subscribe', 'psubscribe', 'unsubscribe', 'punsubscribe'];\n\nvar AllEvents = [].concat(ConnectionEvents, MonitorEvents, PubSubEvents);\n\nvar DefaultPort = 6379;\nvar DefaultHost = '127.0.0.1';\n\nvar DefaultConfig = {\n  port: DefaultPort,\n  host: DefaultHost\n};\n\n/**\n * A Redis client that returns promises for all operations.\n */\n\nvar Client = function (_EventEmitter) {\n  _inherits(Client, _EventEmitter);\n\n  /**\n   * Supported options are:\n   *\n   * - port             The TCP port to use (defaults to 6379)\n   * - host             The hostname of the Redis host (defaults to 127.0.0.1)\n   * - database         The database # to use (defaults to 0)\n   * - password         The password to use for AUTH\n   * - returnBuffers    True to return buffers (defaults to false)\n   */\n\n  function Client(options) {\n    _classCallCheck(this, Client);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Client).call(this));\n\n    var config = options || process.env.REDIS_URL || DefaultConfig;\n\n    if (typeof config === 'string') {\n      var url = (0, _url.parse)(config);\n\n      config = {\n        port: url.port,\n        host: url.hostname\n      };\n\n      if (url.auth) {\n        var split = url.auth.split(':');\n\n        if (split[0] && !isNaN(split[0])) config.database = split[0];\n\n        if (split[1]) config.password = split[1];\n      }\n    }\n\n    _this.port = parseInt(config.port, 10) || 6379;\n    _this.host = config.host || '127.0.0.1';\n\n    if (config.password) config.auth_pass = config.password;\n\n    if (config.returnBuffers) config.return_buffers = true;\n\n    var redisClient = _redis2.default.createClient(_this.port, _this.host, config);\n\n    AllEvents.forEach(function (eventName) {\n      redisClient.on(eventName, _this.emit.bind(_this, eventName));\n    }, _this);\n\n    _this._redisClient = redisClient;\n\n    if (config.database) _this.select(config.database);\n    return _this;\n  }\n\n  _createClass(Client, [{\n    key: 'unref',\n    value: function unref() {\n      this._redisClient.unref();\n    }\n  }, {\n    key: 'send',\n    value: function send(command) {\n      var _this2 = this;\n\n      var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n      return new Promise(function (resolve, reject) {\n        _this2._redisClient.send_command(command, args, function (error, value) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(value);\n          }\n        });\n      });\n    }\n\n    // Update the selected_db property of the client on SELECT.\n\n  }, {\n    key: 'select',\n    value: function select(db) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        // Need to use this so selected_db updates properly.\n        _this3._redisClient.select(db, function (error, value) {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(value);\n          }\n        });\n      });\n    }\n\n    // Parse the result of INFO.\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.send('info').then(_RedisUtils.parseInfo);\n    }\n\n    // Optionally accept an array as the first argument to LPUSH after the key.\n\n  }, {\n    key: 'lpush',\n    value: function lpush(key) {\n      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n      }\n\n      var args = [key].concat(Array.isArray(values[0]) ? values[0] : values);\n      return this.send('lpush', args);\n    }\n\n    // Optionally accept an array as the first argument to RPUSH after the key.\n\n  }, {\n    key: 'rpush',\n    value: function rpush(key) {\n      for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        values[_key2 - 1] = arguments[_key2];\n      }\n\n      var args = [key].concat(Array.isArray(values[0]) ? values[0] : values);\n      return this.send('rpush', args);\n    }\n\n    // Optionally accept an array as the only argument to DEL.\n\n  }, {\n    key: 'del',\n    value: function del() {\n      for (var _len3 = arguments.length, keys = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        keys[_key3] = arguments[_key3];\n      }\n\n      var args = Array.isArray(keys[0]) ? keys[0] : keys;\n      return this.send('del', args);\n    }\n\n    // Optionally accept an array as the only argument to MGET.\n\n  }, {\n    key: 'mget',\n    value: function mget() {\n      for (var _len4 = arguments.length, keys = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        keys[_key4] = arguments[_key4];\n      }\n\n      var args = Array.isArray(keys[0]) ? keys[0] : keys;\n      return this.send('mget', args);\n    }\n\n    // Optionally accept a hash as the only argument to MSET.\n\n  }, {\n    key: 'mset',\n    value: function mset() {\n      for (var _len5 = arguments.length, keysAndValues = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        keysAndValues[_key5] = arguments[_key5];\n      }\n\n      var args = _typeof(keysAndValues[0]) === 'object' ? (0, _RedisUtils.appendHashToArray)(keysAndValues[0], []) : keysAndValues;\n\n      return this.send('mset', args);\n    }\n\n    // Optionally accept a hash as the only argument to MSETNX.\n\n  }, {\n    key: 'msetnx',\n    value: function msetnx() {\n      for (var _len6 = arguments.length, keysAndValues = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        keysAndValues[_key6] = arguments[_key6];\n      }\n\n      var args = _typeof(keysAndValues[0]) === 'object' ? (0, _RedisUtils.appendHashToArray)(keysAndValues[0], []) : keysAndValues;\n\n      return this.send('msetnx', args);\n    }\n\n    // Optionally accept a hash as the first argument to HMSET after the key.\n\n  }, {\n    key: 'hmset',\n    value: function hmset(key) {\n      for (var _len7 = arguments.length, keysAndValues = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        keysAndValues[_key7 - 1] = arguments[_key7];\n      }\n\n      var args = _typeof(keysAndValues[0]) === 'object' ? (0, _RedisUtils.appendHashToArray)(keysAndValues[0], [key]) : [key].concat(keysAndValues);\n\n      return this.send('hmset', args);\n    }\n  }]);\n\n  return Client;\n}(_events.EventEmitter);\n\nClientProperties.forEach(function (propertyName) {\n  Object.defineProperty(Client.prototype, propertyName, {\n    configurable: true,\n    enumerable: false,\n    get: function get() {\n      return this._redisClient[propertyName];\n    }\n  });\n});\n\n_redisCommands2.default.list.forEach(function (command) {\n  // Some commands have spaces in them, like CONFIG SET.\n  var methodName = command.split(' ')[0];\n\n  if (methodName in Client.prototype) return;\n\n  Object.defineProperty(Client.prototype, methodName, {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: function value() {\n      for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      return this.send(command, args);\n    }\n  });\n});\n\nmodule.exports = Client;","/home/travis/build/npmtest/node-npmtest-then-redis/node_modules/then-redis/lib/RedisUtils.js":"'use strict';\n\nvar appendHashToArray = function appendHashToArray(hash, array) {\n  for (var field in hash) {\n    if (hash.hasOwnProperty(field)) array.push(field, hash[field]);\n  }return array;\n};\n\nvar parseInfo = function parseInfo(info) {\n  var hash = {};\n\n  info.split('\\r\\n').forEach(function (line) {\n    var index = line.indexOf(':');\n\n    if (index !== -1) {\n      var name = line.substring(0, index);\n      hash[name] = line.substring(index + 1);\n    }\n  });\n\n  return hash;\n};\n\nmodule.exports = {\n  appendHashToArray: appendHashToArray,\n  parseInfo: parseInfo\n};"}